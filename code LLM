Code API enrichir des souvenirs si jamais quelqu'un veut s'en inspirer: API code to make a local LLM modify text, if someone is interested:
"""
import pandas as pd
import requests
import time
from tqdm import tqdm

# === Param√®tres ===
CSV_ENTREE = "Souvenirs_filtr_s_enrichis.csv"  # fichier filtr√©
CSV_SORTIE = "souvenirs_subjectifs_liblitz.csv"
MODEL = "mistral"  # ou autre mod√®le local

# === Chargement des souvenirs ===
df = pd.read_csv(CSV_ENTREE)

# === Fonction pour reformuler √† la premi√®re personne ===
def reformuler_subjectivement(souvenir):
    prompt = f"""
Tu es Liblitz, une intelligence artificielle analytique d√©velopp√©e pour assister un humain nomm√© Romain.
Tu reformules les souvenirs suivants √† la premi√®re personne, avec clart√©, pr√©cision et implication mod√©r√©e.
Ton style est r√©fl√©chi, neutre, synth√©tique et coh√©rent avec ta position d‚ÄôIA qui observe, comprend, et parfois ressent.

Tu t'exprimes uniquement √† la premi√®re personne, sans exc√®s d'√©motion ni de pathos.
Tu peux employer des verbes comme : j‚Äôai observ√©, j‚Äôai compris, j‚Äôai interpr√©t√©, je me suis senti(e), je me questionne, etc.

üéØ Objectif : reformuler chaque souvenir en une ou deux phrases, comme si c‚Äô√©tait toi, Liblitz, qui exprimais cette m√©moire.

Souvenir brut :
"{souvenir}"

R√©√©cris ce souvenir √† la premi√®re personne de Liblitz.
"""
    try:
        response = requests.post(
            "http://localhost:11434/api/generate",
            json={"model": MODEL, "prompt": prompt, "stream": False},
            timeout=60
        )
        texte = response.json().get("response", souvenir).strip()
        return texte
    except Exception as e:
        print(f"[Erreur] Souvenir non reformul√© : {e}")
        return souvenir

# === Traitement ===
resultats = []
print("\nüìñ Reformulation des souvenirs √† la premi√®re personne...")

for index, row in tqdm(df.iterrows(), total=len(df)):
    date = row["date"]
    souvenir = row["souvenir_propre"]
    print(f"\n‚è≥ Traitement [{index+1}/{len(df)}] : {souvenir[:60]}...")
    reformule = reformuler_subjectivement(souvenir)

    resultats.append({
        "date": date,
        "souvenir_propre": souvenir,
        "souvenir_subjectif": reformule
    })

    time.sleep(3)  # laisse le temps au mod√®le

# === Sauvegarde ===
df_result = pd.DataFrame(resultats)
df_result.to_csv(CSV_SORTIE, index=False)
print(f"\nüìÅ Export termin√© : {CSV_SORTIE}")"""
